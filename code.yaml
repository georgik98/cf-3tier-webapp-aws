AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC: #Create 1 VPC for the whole project
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.20.0.0/20
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: Name
          Value: VPC
  PublicSubnet1: #First public subnet in eu-central-1a AZ
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.1.0/24
      AvailabilityZone: 'eu-central-1a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Public Subnet (web) - eu-central-1a'
  PublicSubnet2: #Second public subnet in eu-central-1b AZ
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.2.0/24
      AvailabilityZone: 'eu-central-1b'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Public Subnet (web) - eu-central-1b'
  PublicSubnet3: #Third public subnet in eu-central-1c AZ
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.3.0/24
      AvailabilityZone: 'eu-central-1c'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Public Subnet (web) - eu-central-1c'
  InternetGateway: # Internet Gateway for internet access for the public subnets
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  RouteTable: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: RouteTable
      VpcId: !Ref VPC
  PublicRouteOne: 
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
  
  PublicSubnetRouteTableAssociation1: #route table association with public subnet 1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnetRouteTableAssociation2: #route table association with public subnet 2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnetRouteTableAssociation3: #route table association with public subnet 3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet3

# Private subnets
#---------------------------------------------------------------- 
  PrivateSubnetApp1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.4.0/24
      AvailabilityZone: 'eu-central-1a'
      Tags:
        - Key: Name
          Value: 'Private Subnet (app) - eu-central-1a'
  PrivateSubnetApp2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.5.0/24
      AvailabilityZone: 'eu-central-1b'
      Tags:
        - Key: Name
          Value: 'Private Subnet (app) - eu-central-1b'
  PrivateSubnetApp3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.6.0/24
      AvailabilityZone: 'eu-central-1c'
      Tags:
        - Key: Name
          Value: 'Private Subnet (app) - eu-central-1c'
# Private subnets have been created
  NatGatewayEipOne: #Start
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC
  NatGatewayOne:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: NatGatewayEipOne
    Properties:
      AllocationId:
        Fn::GetAtt : [NatGatewayEipOne, AllocationId]  
      SubnetId: !Ref PublicSubnet1  
      Tags:
        - Key: Name
          Value: NatGatewayOne
  PrivateRouteTableOne:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable
  RouteOne:
    Type: 'AWS::EC2::Route'
    DependsOn: NatGatewayOne
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayOne
  PrivateSubnetRouteTableAssociationOne:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetApp1
      RouteTableId: !Ref PrivateRouteTableOne
# Created the first nat with eip
  NatGatewayEipTwo: #Start 2
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC
  NatGatewayTwo:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: NatGatewayEipTwo
    Properties:
      AllocationId:
        Fn::GetAtt : [NatGatewayEipTwo, AllocationId]  
      SubnetId: !Ref PublicSubnet2  
      Tags:
        - Key: Name
          Value: NatGatewayTwo
  PrivateRouteTableTwo:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableTwo
  RouteTwo:
    Type: 'AWS::EC2::Route'
    DependsOn: NatGatewayTwo
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayTwo
  PrivateSubnetRouteTableAssociationTwo:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetApp2
      RouteTableId: !Ref PrivateRouteTableTwo
# Created the first nat with eip
  NatGatewayEipThree: #Start 3
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC
  NatGatewayThree:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: NatGatewayEipThree
    Properties:
      AllocationId:
        Fn::GetAtt : [NatGatewayEipThree, AllocationId]  
      SubnetId: !Ref PublicSubnet3  
      Tags:
        - Key: Name
          Value: NatGatewayThree
  PrivateRouteTableThree:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableThree
  RouteThree:
    Type: 'AWS::EC2::Route'
    DependsOn: NatGatewayThree
    Properties:
      RouteTableId: !Ref PrivateRouteTableThree
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayThree
  PrivateSubnetRouteTableAssociationThree:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetApp3
      RouteTableId: !Ref PrivateRouteTableThree
# 3 private app subnets with NAT were created
#----------------------------------------------
# 3 private DB subnets are now going to be created
  PrivateSubnetDB1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.7.0/24
      AvailabilityZone: 'eu-central-1a'
      Tags:
        - Key: Name
          Value: 'Private Subnet (DB) - eu-central-1a'
  PrivateSubnetDB2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.8.0/24
      AvailabilityZone: 'eu-central-1b'
      Tags:
        - Key: Name
          Value: 'Private Subnet (DB) - eu-central-1b'
  PrivateSubnetDB3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.20.9.0/24
      AvailabilityZone: 'eu-central-1c'
      Tags:
        - Key: Name
          Value: 'Private Subnet (DB) - eu-central-1c'
#------------------------------------------
  PrivateRouteTableDB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PrivateRouteDB:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableDB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayOne
  SubnetRouteTableAssociationDBOne:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetDB1
      RouteTableId: !Ref PrivateRouteTableDB
#-------------------------------------------
  PrivateRouteTableDB2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PrivateRouteDB2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableDB2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayTwo
  SubnetRouteTableAssociationDBTwo:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetDB2
      RouteTableId: !Ref PrivateRouteTableDB2
#--------------------------------------------
  PrivateRouteTableDB3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PrivateRouteDB3:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableDB3
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayThree
  SubnetRouteTableAssociationDBThree:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetDB3
      RouteTableId: !Ref PrivateRouteTableDB3

# I use 1 NAT Gateway per AZ because NAT Gateway needs a single
# EIP to handle the outbound internet traffic for multiple subnets in the same AZ.

# This was the networking infrastructure part of the project.

#-------------------------------------------------
# EC2 in public jump server
JumpServerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH access via port 22 and HTTP access via port 80'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
JumpServer:
  Type: 'AWS::EC2::Instance'
  Properties:
    InstanceType: 't2.micro'
    ImageId: 'ami-0a946522147cbcbcc'
    KeyName: 'GK16'
    Tags:
      - Key: Name
        Value: 'JumpServer'
    NetworkInterfaces:
        - DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet1
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref JumpServerSG

PrivatePhpInstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH access only from the JumpServer'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt JumpServerSG.GroupId  # Allowing SSH only from the JumpServer
PrivatePhpInstance:
  Type: 'AWS::EC2::Instance'
  Properties:
    InstanceType: 't2.micro'
    ImageId: 'ami-0a946522147cbcbcc'
    SubnetId: !Ref PrivateSubnetApp1
    SecurityGroupIds:
      - !Ref PrivatePhpInstanceSG
    KeyName: 'GK16'
    Tags:
      - Key: Name
        Value: 'PrivatePhpInstance'
    



Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  NatGatewayIpOne:
    Description: 'EIP associated with the NAT Gateway1'
    Value: !Ref NatGatewayEipOne
  NatGatewayIpTwo:
    Description: 'EIP associated with the NAT Gateway2'
    Value: !Ref NatGatewayEipTwo
  NatGatewayIpThree:
    Description: 'EIP associated with the NAT Gateway3'
    Value: !Ref NatGatewayEipThree